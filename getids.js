const fs=require("fs"),path=require("path"),jsonFilePath=process.argv[2];if(!jsonFilePath){console.error("Please provide the file path as an argument."),process.exit(1);}fs.readFile(jsonFilePath,"utf8",(err,data)=>{if(err)throw err;let content=data.replace(/\x([0-9A-Fa-f]{2})/g,(match,hex)=>`\\u${parseInt(hex,16).toString(16).padStart(4,"0")}`);try{const jsonObject=JSON.parse(content),items=jsonObject.messages||[];if(items.length===0){throw new Error("The messages array is empty or not found.");}const fromCsvHeader="from_id,from,standard_chars,special_chars\n",actorCsvHeader="actor_id,actor,standard_chars,special_chars\n",dirName=path.dirname(jsonFilePath),fromCsvPath=path.join(dirName,"from.csv"),actorCsvPath=path.join(dirName,"actor.csv");if(!fs.existsSync(dirName)){fs.mkdirSync(dirName);}let fromCsv=fromCsvHeader,actorCsv=actorCsvHeader;items.forEach((item)=>{if("from_id"in item&&item.from){const{standardChars,specialChars}=filterAndIdentifySpecialChars(item.from);fromCsv+=`${item.from_id},${item.from},${standardChars},${specialChars}\n`;}if("actor_id"in item&&item.actor){const{standardChars,specialChars}=filterAndIdentifySpecialChars(item.actor);actorCsv+=`${item.actor_id},${item.actor},${standardChars},${specialChars}\n`;}});fs.writeFileSync(fromCsvPath,fromCsv);fs.writeFileSync(actorCsvPath,actorCsv);console.log(`CSV file from.csv has been written to: ${fromCsvPath}`);console.log(`CSV file actor.csv has been written to: ${actorCsvPath}`);}catch(parseError){console.error("An error occurred while parsing JSON:",parseError.message);}});function filterAndIdentifySpecialChars(str){const standardChars=str.match(/[a-zA-Zа-яА-Я\s]/g)||[],specialChars=str.match(/[^\a-zA-Zа-яА-Я\s]/g)||[];return{standardChars:standardChars.join(''),specialChars:specialChars.join('')};}
