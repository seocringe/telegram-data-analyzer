const fs=require("fs"),path=require("path"),jsonFilePath=process.argv[2];function filterAndIdentifySpecialChars(a,r){const s=a.match(/[a-zA-Zа-яА-Я\s]/g)||[],t=a.match(/[^\a-zA-Zа-яА-Я\s]/g)||[],e=`${r},${a},${s.join("")},${t.join("")}\n`;return{standardChars:s.join(""),specialChars:t.join(""),csvRow:e}}jsonFilePath||process.exit(1),fs.readFile(jsonFilePath,"utf8",((a,r)=>{if(a)throw a;let s=r.replace(/\x([0-9A-Fa-f]{2})/g,((a,r)=>`\\u${parseInt(r,16).toString(16).padStart(4,"0")}`));try{const a=JSON.parse(s).messages||[];if(0===a.length)throw new Error("The messages array is empty or not found.");const r="from_id,from,standard_chars,special_chars\n",t="actor_id,actor,standard_chars,special_chars\n",e=path.dirname(jsonFilePath),i=path.join(e,"from.csv"),n=path.join(e,"actor.csv");fs.existsSync(e)||fs.mkdirSync(e);let o=r,c=t,h=new Set,d=new Set;a.forEach((a=>{if("from_id"in a&&a.from){const{standardChars:r,specialChars:s,csvRow:t}=filterAndIdentifySpecialChars(a.from,a.from_id);h.has(t)||(h.add(t),o+=t)}if("actor_id"in a&&a.actor){const{standardChars:r,specialChars:s,csvRow:t}=filterAndIdentifySpecialChars(a.actor,a.actor_id);d.has(t)||(d.add(t),c+=t)}})),fs.writeFileSync(i,o),fs.writeFileSync(n,c)}catch(a){}}));